<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2018年 ARTS 周周享 (29)]]></title>
    <url>%2Fd060c1c9.html%2F</url>
    <content type="text"><![CDATA[Algorithm 存在重复元素 给定一个整数数组，判断是否存在重复元素。 如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。 示例 1: 输入: [1,2,3,1]输出: true示例 2: 输入: [1,2,3,4]输出: false 来看我的第一次解答 1234567891011func containsDuplicate(nums []int) bool &#123; numsLen := len(nums) for i := 0; i &lt; numsLen - 1; i++ &#123; for j := i + 1; j &lt; numsLen; j++ &#123; if nums[i] == nums[j] &#123; return true &#125; &#125; &#125; return false&#125; 来看看改良版本的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263func containsDuplicate(nums []int) bool &#123; return findDup(nums, 0, len(nums))&#125;func findDup(nums []int, start int, end int) bool &#123; if end - start &lt; 2 &#123; return false &#125; if end - start == 2 &#123; return nums[start] == nums[end-1] &#125; m := (end+start)/2 nums[start], nums[m] = nums[m], nums[start] i := start + 1 j := end -1 var mid int for &#123; for i!=j &#123; if nums[i] == nums[start] &#123; return true &#125; if nums[i] &lt; nums[start] &#123; i++ &#125; else &#123; break &#125; &#125; for i!=j &#123; if nums[j]== nums[start] &#123; return true &#125; if nums[j] &gt; nums[start] &#123; j-- &#125; else &#123; break &#125; &#125; if i &lt; j &#123; nums[i], nums[j] = nums[j], nums[i] i++ j-- &#125; if i == j &#123; if nums[i] == nums[start] &#123; return true &#125; if nums[i] &lt; nums[start] &#123; mid = i+1 &#125; else &#123; mid = i &#125; break &#125; else if (i &gt; j) &#123; mid = i break &#125; &#125; return findDup(nums, start+1, mid) || findDup(nums, mid, end) &#125; 利用 map 来做重复判断, 这个算是取巧吗? ^_^ 123456789101112func containsDuplicate(nums []int) bool &#123; numsMap:=make(map[int]bool) for _,num:=range nums&#123; if _,ok:=numsMap[num];ok&#123; return true &#125; numsMap[num]=true &#125; return false &#125; Review本周在 golang 的一个中文社区进行 Iris 框架文档翻译。 传送门 希望不要误人子弟。本人很多也是多次斟酌，并且还参考了在线翻译， 以及维基百科。尽量做到好理解，不出错。（原谅本人英文水平确实有限） Tip这儿就记录一下，Docker 的不常用骚操作； 新建一个 镜像 Create a new image from a container’s changes Commit 123456docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]# exampledocker commit c3f279d17e0a microvision:v1 保存 Docker 镜像 Save one or more images to a tar archive (streamed to STDOUT by default) Save 123456docker save [OPTIONS] IMAGE [IMAGE...]# exampledocker save -o image.tar microvision:v1 导出压缩包 Load an image from a tar archive or STDIN Load 123456docker load [OPTIONS]# exampledocker load --input image.tar Share上一周提到了面试一个 4 年工作经验的 PHPer，而这一周，我又可以吹大牛了－－本周面试了一个 8 年经验的 PHPer。 本人一向秉着，面试不是为了为难面试者，让他觉得不如自己。而是为了测试他的水平到底到哪儿？这样，就隐身出了两个方面。一、都会什么；二、不会什么。说白了，就是知识的边界在哪儿？ 结合群里的参考，我就来说说此次的面试经历吧。 首先说下面试过程吧。我们这儿都是人事面试完直接把做的题和简历给我。看到简历的一瞬间，我是懵逼的，８年的经验。ＷＴＦ，当时心里一下是这种感觉，然后见了面试者，说了一些简单的问题和他的经历。然后我就不知道该提问什么了？原本是计划招一个 １－３ 年工作经验的，完全在意料之外，准备也不充分。 事后，在耗子读书群的群友的帮助下，结合自身的一点儿微末经验，总结了一些面试须知： 面试需要量化考核，当然，这主要是说我这种野路子，凭感觉来的。 基础块 测试语法基础 考察编程思想 算法块 考察编码风格 算法逻辑 场景块 对实际工作中会出现的问题，是否能有效提供解决方案 经验只是参考，更重要的与企业以及团队的匹配度 会发现，有些人更重视应用和业务 有些人基础扎实，但是并不关注于业务 对知识的理解是否透彻 是否浮于表面，这点考察很重要，奈何想考察出来，也得下点儿功夫的]]></content>
      <categories>
        <category>分享</category>
        <category>arts</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
        <tag>PHP</tag>
        <tag>Docker</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年 ARTS 周周享 (28)]]></title>
    <url>%2Fc97bf088.html%2F</url>
    <content type="text"><![CDATA[Algorithm 旋转数组 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 示例 1: 123456输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4] 以下是第一次想出来 123456789101112131415161718192021func rotate(nums []int, k int) []int &#123; last := len(nums) if k &gt; last &#123; k %= last &#125; for index := 0; index &lt; k; index ++ &#123; temp := 0 for i := last ; i &gt;= 0 ; i-- &#123; if i == last &#123; temp = nums[i-1] continue &#125; if i == 0 &#123; nums[0] = temp continue &#125; nums[i] = nums[i-1] &#125; &#125; return nums&#125; 改进版本 12345678910111213141516171819202122func rotate(nums []int, k int) []int &#123; n := len(nums) if k &gt; n &#123; k %= n &#125; if k == 0 || k == n &#123; return nums &#125; reverse(nums, 0, n-1) reverse(nums, 0, k-1) reverse(nums, k, n-1) return nums&#125;func reverse(nums []int, i, j int) &#123; for i &lt; j &#123; nums[i], nums[j] = nums[j], nums[i] j-- i++ &#125;&#125; Review本周在 golang 的一个中文社区进行文档翻译。 传送门 希望不要误人子弟。本人很多也是多次斟酌，并且还参考了在线翻译， 以及维基百科。尽量做到好理解，不出错。（原谅本人英文水平确实有限） Tip本周在使用 laravel 中， 对官网的文档以及其他示例的网站源码学习了一下。 队列说实话， 使用了这么久的 PHP ， 并没有在真实的项目中使用过队列， 本周就把队列加入到服务中了。 laravel 的队列使用比较简单的。 首先它需要一个配置一下连接 比较重要的是， 需要区分 连接 和 队列 。 而连接的另一端便是重要的驱动需求。 配置好了， 接下来就是创建任务了。 任务调度任务调度让我们不再需要在linux 下直接编写 Cron 项目。 但是你需要这么一条指令来为你的项目增加没分钟的检测。 * * * * * php /path-to-your-project/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1 关于此处的东西， 会另开一篇文章来详细说明。 Shares本周想分享的是在最近面试一个 4 年 PHPer 的感悟。 首先，我一开始入行学的就是 PHP 这门语言了，但是在接下的战场，转战各个语言和框架，大多停留在表面，并未有深入的探究的研究。此次也是由于工作的原因，我又重新拿起了 PHP。 不得不承认的是，作为一个现在化框架的 Laravel，确实拥有的很多值得称赞的东西。他紧追的时间的浪潮，让 PHP7 进入更多开发者视线。并且在组建团队的时候，面试了一个具有4年经验的 PHPer， 发现他一直用的是 PHP 5.4 ，这我并不是说就完全摒弃 PHP5 ，由于历史包袱的原因，我们这儿依旧维护的 PHP 5.6 的一个项目。 但是他给你的感觉就是，PHP 5.4 用惯了，而且也挺好的。为啥要换啊，这你就很无语了，新版本的性能啊什么提高你没看到吗？就算你喜欢 PHP 5 ， 那人家 PHP5.6 号称最好的 PHP 5 ， 也没有见你用啊。你都没有了解过，就盲目的下结论。至少在我看来，这就是不愿走出舒适区。 当然，这儿说这些话，不是说只喜欢新东西，旧的就是垃圾。主要是他的感觉就是，没啥真才实学。出口要 20k 左右。说的不好听点儿，你就是砖搬得稍微熟练点儿，要说竞争力，那是一毛钱都嫌多。如果你能看到这篇分享，希望你能提高自己，混日子，还想要高薪，可能就只能在梦里。 啊~~ 在梦里。。。（联想邓丽君的《甜蜜蜜》）]]></content>
      <categories>
        <category>分享</category>
        <category>arts</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Laradock配置PHP开发环境]]></title>
    <url>%2Fe047a409.html%2F</url>
    <content type="text"><![CDATA[需要一个简易的开发环境传统的开发环境, 需要自己下 PHP, Nginx, MySQL… 等一大堆东西, 但是 docker 给我们带来了便利, 从此就告别了, 本地环境跑的好好的东西,为啥服务器就是不给力, 各种未知的bug. 准备工作 docker 环境 不管你是 Mac, windows 或者 linux 等, 先去官网搞定这个基础环境. 传送门 Git你需要 clone 源码. 开始你的表演 拉取源码进入你的开发代码目录 git clone https://github.com/laradock/laradock.git 修改配置1cp env-example .env 接下就可以修改 .env 里面的配置了. 12# 修改composer 为中国镜像 提速WORKSPACE_COMPOSER_REPO_PACKAGIST=https://packagist.phpcomposer.com 1234# 接下来运行 Nginx 以及 mysql redis...docker-compose up -d nginx mysql# 因为是首次拉取, 所以会比较慢 当然你可以使用加速器来加速docker 需要注册登录, 并且是免费的 https://www.daocloud.io/mirror#accelerator-doc 12# 这样你就可以进入工作台了docker-compose exec --user=laradock workspace bash phpstorm xdebug在这儿用 Windows 做例子, 毕竟用 Windows 开发是坑最多了. 开启 xdebug123456789# laradock/.env 文件# 修改### WORKSPACE #############################################WORKSPACE_INSTALL_XDEBUG=trueWORKSPACE_INSTALL_WORKSPACE_SSH=true### PHP_FPM ###############################################PHP_FPM_INSTALL_XDEBUG=true 修改 .ini 配置1234567891011121314; laradock/workspace/xdebug.ini; laradock/php-fpm/xdebug.ini; 修改两个文件; remote_host 的 "dockerhost" 是 laradock/.env 文件下的 DOCKER_HOST_IP 的值, 需要在 系统的 hosts 文件添加这么一条记录 10.0.75.1 dockerhostxdebug.remote_host=dockerhost xdebug.remote_connect_back=0xdebug.remote_port=9000xdebug.idekey=PHPSTORMxdebug.remote_autostart=1xdebug.remote_enable=1xdebug.cli_color=1 修改 hosts 文件此处需要 管理员权限 配置 phpstorm 配置 deployment 配置 server PHP_IDE_CONFIG=serverName=laradock 配置 debug (非必填) 配置 test Framework Edit Run/Debug configuration]]></content>
      <categories>
        <category>工具库</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>docker</tag>
        <tag>laradock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年 ARTS 周周享 (27)]]></title>
    <url>%2F185059fb.html%2F</url>
    <content type="text"><![CDATA[2018 27th weekAlgorithm 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 初次完成的12345678910111213141516171819202122232425func maxProfit(prices []int) int &#123; if len(prices) &lt;= 0 &#123; return 0 &#125; income := 0 j := len(prices) i := 0; for i &lt; (j - 1) &#123; rLarge := prices[i] rNum := i for l := i + 1 ; l &lt; j ; l ++ &#123; if rLarge &gt; prices[l] &#123; break &#125; if rLarge &lt; prices[l] &#123; rLarge = prices[l] rNum = l &#125; &#125; income = income + rLarge - prices[i] i = rNum + 1 &#125; return income&#125; 最终完成的12345678910111213141516func maxProfit(prices []int) int &#123; if len(prices) &lt;= 0 &#123; return 0 &#125; income := 0 j := len(prices) i := 0; for i &lt; (j - 1) &#123; if prices[i] &lt; prices[i + 1] &#123; income += prices[i+1] - prices[i] &#125; i++ &#125; return income&#125; 我的想法一开始, 是我想多了, 按照自己的思维, 这种算法对人来说, 可能加的运算少了, 比较容易计算, 但是边界问题没有处理, 多次出现问题 最后发现, 总归是要遍历的, 一次从头到尾就ok了, 为啥还要那么麻烦. Review PHP 学习的必备网站原文 Best Websites for Learning PHP Programming https://medium.com/@simpliv/best-websites-for-learning-php-programming-5562697d5fbb This article show 16 website for learning PHP programing. Codecourse You can learn PHP and other web development. It also available watch videos at their YouTube channel. Stone River eLearning In this website, the course is not free. It is not a PHP specific website PHP Manual Learn PHP, this website is helpful. It also has comments and support Chinese. Killer PHP Maybe you don’t have technical backgrounds, This website is match you. PHP 101 PHP For the Absolute Beginner Tutorials Point W3Schools, when I first sawed it, but is not true. It has more content and more importantly, the right content. Tizag This website looks like antique.I can not understand author Simpliv This is video course site point.(and not free) I can not Accept their accent. Hacking with PHP Update to PHP7 you just need $20 Codeigniter CodeIgniter is a powerful PHP framework, But I love Laravel Lynda This website is teaching many kinds of course (Not free) Udemy Support Chinese, a on-line course website. (Note free) W3 Schools It need not instruction. Name means content. Derek Banas Video Tutorial on YouTube It is so old. StackOverflow As a coder no one does not know it. Code Academy You can learn many different language. (Free) Tip 看了下自己的博客, 已经好久没有更新了. 真是汗颜. 正好此次写 ARTS , Next 主题进行了大的版本升级, 内置了 gitment. 关于 hexo 主题 Next 的 6.3 升级步骤 源码库1git clone https://github.com/theme-next/hexo-theme-next themes/next 修改你的主题配置12# gitment: .... so easy it 关于 Markdown 有一个以前不常用的 图片链接记录下 1[![微信图片_20180705113552.jpg](https://i.loli.net/2018/07/05/5b3d922e4bfea.jpg)](https://i.loli.net/2018/07/05/5b3d922e4bfea.jpg) Share 因为是首次的分享, so, 我就说下放弃 blog 的这些日子吧.真的是很轻松, 而且没有什么压力和负担.但是技术好像也荒废了, 能及时的把知识, 归纳成体系, 总结成系统, 这个是很有必要. 希望回过头, 看看自己走过的路, 不是那么的迷茫未来. 最主要也是感谢一下, 耗子叔(陈皓), 左耳听风专栏的作者. 给了我很大的支持以及鼓励. 传送门 如果你也喜欢, 欢迎订阅他的专栏 下一次分享, 本人计划把, slack 好好研究下, 做个分享.]]></content>
      <categories>
        <category>分享</category>
        <category>arts</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RegEx 正则表达式 玩不转]]></title>
    <url>%2Fb9975ef4.html%2F</url>
    <content type="text"><![CDATA[玩转玩不转的正则1A regular expression (regex or regexp for short) is a special text string for describing a search pattern. You can think of regular expressions as wildcards on steroids. 正则表达式推荐几个在线的正则表达式测试以及常用规则 传送门 | 传送门II | 在线工具类 学习类参考 传送门 普通字符普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。 特殊字符 特别字符 描述 $ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$。 ( ) 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。 * 匹配前面的子表达式零次或多次。要匹配 字符，请使用 \。 + 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。 . 匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。 [ 标记一个中括号表达式的开始。要匹配 [，请使用 [。 ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。 \ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “\”，而 ‘(‘ 则匹配 “(“。 ^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。 { 标记限定符表达式的开始。要匹配 {，请使用 {。 指明两项之间的一个选择。要匹配 ，请使用 \ 。 非打印字符 字符 描述 \cx 匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。 \f 匹配一个换页符。等价于 \x0c 和 \cL。 \n 匹配一个换行符。等价于 \x0a 和 \cJ。 \r 匹配一个回车符。等价于 \x0d 和 \cM。 \s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。 \S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 \t 匹配一个制表符。等价于 \x09 和 \cI。 \v 匹配一个垂直制表符。等价于 \x0b 和 \cK。 \w 匹配一个单字字符（字母、数字或者下划线）。等价于[A-Za-z0-9_]。例如, /\w/ 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。 \W 匹配一个非单字字符。等价于[^A-Za-z0-9]。例如, /\W/ 或者 /[^A-Za-z0-9]/ 匹配 “50%.” 中的 ‘%’。 限定符 字符 描述 * 匹配前面的子表达式零次或多次。例如，zo 能匹配 “z” 以及 “zoo”。 等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。 {n,} n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。 {n,m} m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。 *、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配 定位符 字符 描述 ^ 匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。 $ 匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。 \b 匹配一个字边界，即字与空格间的位置。 \B 非字边界匹配。]]></content>
  </entry>
  <entry>
    <title><![CDATA[FEE前端探索交流会]]></title>
    <url>%2Fc748d68a.html%2F</url>
    <content type="text"><![CDATA[开始你的表演这是一场关于 AR 发展的基础讲说和 iview 相关的一些说明. WEBAR 识别&amp;跟踪 模型开发 终端适配 模型渲染 three.js webrt AR.JS three.js 60fps 高效 基于 web 纯粹的浏览器支持 PAT 识别 NFT 识别 AR.JS 与 Mapbox 结合 artoolkitemscriptGoogle ARwebARonARCoreAndroid 实验性 Three.ar.jswebARonARkitios 实验性 继续编这次交流会因为时间的缘故, 并没有参加完. 不过 iview 作者也给出了关于 style 样式的修改意见, 通过全局修改样式, 并没有其他好的办法. ^_^]]></content>
  </entry>
  <entry>
    <title><![CDATA[Markdown 玩不转]]></title>
    <url>%2F64460.html%2F</url>
    <content type="text"><![CDATA[玩转玩不转的 MarkdownMarkdown Style Guide 风格指南参考]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo 玩不转]]></title>
    <url>%2F4fce4897.html%2F</url>
    <content type="text"><![CDATA[玩转玩不转的Hexo官方指导, 是最具有权威的指导, 但是我依然要写这篇文章, 是为了让你能快速开发, 并且给出一些个人建议, 更多细节请参考官网 本文即是在 Next 主题下实现, 而其中的某些配置也是配合该主题使用的, 本人也会在配置上说明 准备工作这儿是配置必要的环境, 已经配置好的请跳过 Node Windows 下直接去官网 下载 安装完成后使用命令 node -v 检测是否安装成功 Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 在node 装好后, 使用命令 npm install hexo-cli -g 安装 hexo脚手架工具 更多指导跳官网 文章链接永久化 安装依赖 1npm i hexo-abbrlink -S 配置Permalink 1permalink: blog/:abbrlink/ - 此处的blog可换成任意你喜欢的目录 添加配置 123456789# abbrlink configabbrlink:alg: crc32 # 算法：crc16(default) and crc32rep: hex # 进制：dec(default) and hex可选择的算法:crc16 &amp; hexcrc16 &amp; deccrc32 &amp; hexcrc32 &amp; dec Next 主题本人仅选择一个主题作为介绍, 其他主题的用法或者功能或有不同, 不过可以参考和类推 自制主题 Next 主题 Quick Start12cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/next next主题集成gitment评论系统当然Next主题中也包含了很多主题, 习惯了github的邮箱推送, 可能其他评论系统也有, 请自行发掘这个评论主要是把评论放到github的issues系统里. 注册Oauth点击注册 Authorization callback URL 就是你要申请登录的网站 修改配置 next 主题配置 _config.yml 添加 123456789# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment: enable: true githubID: yourid repo: yourrepo ClientID: yourid ClientSecret: yoursecret lazy: true 主题next目录下 languages/en.yml 添加 1gitmentbutton: Show comments from Gitment 主题next目录下 languages/zh-Hans.yml增加: 1gitmentbutton: 显示 Gitment 评论 添加gitment评论判断在layout/_partials/comments.swig 12&#123;% elseif theme.changyan.appid and theme.changyan.appkey %&#125; &lt;div id="SOHUCS"&gt;&lt;/div&gt; 下新增 1234567&#123;% elseif theme.gitment.enable %&#125; &#123;% if theme.gitment.lazy %&#125; &lt;div onclick="ShowGitment()" id="gitment-display-button"&gt;&#123;&#123; __('gitmentbutton') &#125;&#125;&lt;/div&gt; &lt;div id="gitment-container" style="display:none"&gt;&lt;/div&gt; &#123;% else %&#125; &lt;div id="gitment-container"&gt;&lt;/div&gt; &#123;% endif %&#125; 添加gitment显示文件在layout/_third-party/comments/目录下中添加文件gitment.swig并且引入在layout/_third-party/comments/index.swig文件中引入 include &#39;gitment.swig&#39; 12345678910111213141516171819202122232425262728293031323334353637&#123;% if theme.gitment.enable %&#125; &#123;% set owner = theme.gitment.githubID %&#125; &#123;% set repo = theme.gitment.repo %&#125; &#123;% set cid = theme.gitment.ClientID %&#125; &#123;% set cs = theme.gitment.ClientSecret %&#125; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt; &lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt; &#123;% if not theme.gitment.lazy %&#125; &lt;script type=&quot;text/javascript&quot;&gt; var gitment = new Gitment(&#123; id: window.location.pathname, owner: &apos;&#123;&#123;owner&#125;&#125;&apos;, repo: &apos;&#123;&#123;repo&#125;&#125;&apos;, oauth: &#123; client_id: &apos;&#123;&#123;cid&#125;&#125;&apos;, client_secret: &apos;&#123;&#123;cs&#125;&#125;&apos;, &#125;&#125;); gitment.render(&apos;gitment-container&apos;); &lt;/script&gt; &#123;% else %&#125; &lt;script type=&quot;text/javascript&quot;&gt; function ShowGitment()&#123; document.getElementById(&quot;gitment-display-button&quot;).style.display = &quot;none&quot;; document.getElementById(&quot;gitment-container&quot;).style.display = &quot;block&quot;; var gitment = new Gitment(&#123; id: document.location.href, owner: &apos;&#123;&#123;owner&#125;&#125;&apos;, repo: &apos;&#123;&#123;repo&#125;&#125;&apos;, oauth: &#123; client_id: &apos;&#123;&#123;cid&#125;&#125;&apos;, client_secret: &apos;&#123;&#123;cs&#125;&#125;&apos;, &#125;&#125;); gitment.render(&apos;gitment-container&apos;); &#125; &lt;/script&gt; &#123;% endif %&#125;&#123;% endif %&#125; 添加gitment样式在主题目录下 source/css/_common/components/third-party/ 下添加gitment.styl文件并且在 source/css/_common/components/third-party/third-party.styl 下引入 @import &quot;gitment&quot;; 12345678910111213#gitment-display-button&#123; display: inline-block; padding: 0 15px; color: #0a9caf; cursor: pointer; font-size: 14px; border: 1px solid #0a9caf; border-radius: 4px; &#125; #gitment-display-button:hover&#123; color: #fff; background: #0a9caf; &#125; 迁移 迁移操作很简单, 更多详见 官方指南 目标: Jekyll 操作: 把 _posts 文件夹内的所有文件复制到 source/_posts 文件夹，并在 _config.yml 中修改 new_post_name 参数。new_post_name: :year-:month-:day-:title.md 标签与分类创建页面 标签与分类, 是为了更好的规整文档, 本段是配合next主题使用的 123cd your-hexo-site hexo new page tags # 创建标签页面hexo new page categories # 创建分类页面 修改页面类型分别在刚才添加的分类和标签页面 添加type 以及 comments 评论功能关闭 12345678910111213---title: categoriesdate: 2017-12-05 11:38:23type: "categories"comments: false------title: categoriesdate: 2017-12-05 11:38:23type: "tags"comments: false--- 修改配置文件修改菜单显示 在主题的配置文件 _config.yml 中添加标签和分类 12345menu: home: / archives: /archives/ tags: /tags/ categories: /categories/ 使用标签和分类在新建的文章中,添加tags 以及 categories即可. 示例: 123456789---title: Hexo 玩不转abbrlink: 4fce4897date: 2017-12-02 14:14:06tags: - 玩不转category: - 实践先锋--- Tag Plugins 标签插件 标签插件是用于在文章中快速插入特定内容的插件。 Quote 引用块 这儿只做简单示例, 更多使用请查看官网 123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; 例如: 123&#123;% blockquote Hexo https://hexo.io/news/ Hexo 3.2 Released %&#125;It has been a long time that Hexo is poor at handling large website. (#710, #1124, #283, #1187, #550, #1769, etc.) We tried hard to solve this problem and there’re several improvements in Hexo 3.2.&#123;% endblockquote %&#125; 显示效果 It has been a long time that Hexo is poor at handling large website. (#710, #1124, #283, #1187, #550, #1769, etc.) We tried hard to solve this problem and there’re several improvements in Hexo 3.2. HexoHexo 3.2 Released 资源与数据 这段主要讨论的是如何合理的使用资源和数据, 我会列出 Hexo 官方的做法, 以及个人的想法 资源文件夹基本加载方式最简单的方法就是将它们放在 source/images 文件夹中。然后通过类似于 ![](/images/image.jpg) 的方法访问它们。 相对路径引用的标签插件 修改配置文件_config.ymlpost_asset_folder: true 相对路径引用标签 1正确的引用图片方式是使用标签插件而不是 markdown 以上是官网给的回答, 个人认为Markdown的比较简单好用, 而且学习一个新的标签语法用来写博客也会增加学习成本. (毕竟就只是写个博客而已^_^) 数据文件夹 Hexo 3.0 新增的「数据文件」功能。此功能会载入 source/_data 内的 YAML 或 JSON 文件. 举例来说，在 source/_data 文件夹中新建 menu.yml 文件： 123Home: /Tags: /tags/Archives: /archives/ 您就能在模板中使用这些资料： 123&lt;% for (var link in site.data.menu) &#123; %&gt; &lt;a href=&quot;&lt;%= site.data.menu[link] %&gt;&quot;&gt; &lt;%= link %&gt; &lt;/a&gt;&lt;% &#125; %&gt; 渲染结果如下 : 123&lt;a href=&quot;/&quot;&gt; Home &lt;/a&gt;&lt;a href=&quot;/tags/&quot;&gt; Tags &lt;/a&gt;&lt;a href=&quot;/archives/&quot;&gt; Archives &lt;/a&gt; 草稿与推送Hexo 的一种特殊布局 Draft 草稿, 是保存在 source/_drafts 目录下, 草稿默认不会显示在页面中, 这就方便了我们编写, 不会把半成品推上去 ^_^ 操作指令新建草稿文本 1hexo new draft &lt;title&gt; 发布草稿文本 1hexo publish [layout] &lt;title&gt; 预览设置为了方便调试, 你可以修改该配置来预览草稿 1render_drafts: true]]></content>
      <categories>
        <category>建站系统</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>玩不转</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub Pages 玩不转]]></title>
    <url>%2F52725.html%2F</url>
    <content type="text"><![CDATA[玩不转的GitHub Pages 玩转玩不转, 就是把免费的博客搞起来. 非高端教程 ^_^ 准备工作 你所需要的环境 GitHub 首先的申请一个账号GitHub 传送门 登录后, 创建一个新的仓库,并且以 username.github.io 为仓库名, 这儿的username是你自己的GihtHub 账号名 Node Windows 下直接去官网 下载 安装完成后使用命令 node -v 检测是否安装成功 Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 在node 装好后, 使用命令 npm install hexo-cli -g 安装 hexo脚手架工具 更多指导跳官网 看到你的 Hello World 首先把 username.github.io 这个版本 clone 到本地 然后在 cd username.github.io 进入该版本库 创建一个名为 hexo 的分支 git checkout -b hexo 创建 Hexo 项目 hexo init 安装依赖 npm i 修改配置信息 _config.yml 修改网站的 title 之类 , 详细参考Hexo 玩不转 主要是填写 版本库的地址1234deploy: type: git repo: https://github.com/MasterShu/mastershu.github.io.git - 这儿填写你自己的地址 branch: master 上传 GitHub 安装依赖 npm install hexo-deployer-git --save 执行上传, 上传过程中可能需要输入你自己的 GitHub 账号密码 123hexo cleanhexo generatehexo deploy 然后访问 http://username.github.io 就可以看到自己的博客了 免费的博客进行的这一步, 其实已经完成了自己的 `GitHub Pages` 的主要操作了, 对于SEO之类的, 反正我不是很懂, 就是为了 装*, 接下来, 就是配置自己的域名访问 首先的注册一个域名, 阿里云, 腾讯云之类的都可以, 不打广告 就行域名解析, 获取要解析的域名IP ping username.github.io 获取你的自己的IP 解析一个二级域名到该IP blog 配置 GItHub 上的自定义 Custom domain ,输入自己刚才解析的 blog.userdomain.name , 在版本的 setting 下 至此, 一个免费的博客就完成了, 可以通过你自己的域名访问的博客]]></content>
  </entry>
  <entry>
    <title><![CDATA[bat Windows 脚本的编写]]></title>
    <url>%2F59564.html%2F</url>
    <content type="text"><![CDATA[BAT 脚本编写指南 由于Windows 的操作并不是大小写敏感, 所以, 本文的示例有大写也有小写, 并不影响实际操作!BAT 脚本编码使用 GB 2312 简体中文, 使用 UTF-8后竟然乱码报错,没细究, 使用就对了^_^ 常用指令显示echo 表示显示此命令后的字符 echo off 表示在此语句后所有运行的命令都不显示命令行本身 @ 与 echo off相象，但它是加在每个命令行的最前面，表示运行时不显示这一行的命令行（只能影响当前行）。 调用call 调用另一个批处理文件（如果不用call而直接调用别的批处理文件，那么执行完那个批处理文件后将无法返回当前文件并执行当前文件的后续命令）。 暂停pause 运行此句会暂停批处理的执行并在屏幕上显示Press any key to continue...的提示，等待用户按任意键后继续 注释rem 表示此命令后的字符为解释行（注释），不执行，只是给自己今后参考用的（相当于程序中的注释）。 当然,我们还可以使用 :: 来代替 rem 目录操作创建目录12MKDIR # 全拼MD # 简写 创建单个文件夹 格式：MD [路径\]目录 示例: md &quot;C:\Documents and Settings\Master^ Shu&quot; 同时创建多个目录 格式: MD [路径\]目录1 [路径\]目录2 [路径\]目录3…… 示例: md abc D:\Dcouments\123 qwe 在当前目录下建立abc和qwe两个目录,同时D:\gmae下也建立一个目录123。 创建多级目录 格式: MD [路径\]目录1\目录2\目录3\… 示例: md d:\abc\abcd\abcde 在 d 盘下 创建目录 abd ,在abc 下创建 abcd … 删除目录12345RMDIR [/S] [/Q] [drive:]pathRD [/S] [/Q] [drive:]path /S 除目录本身外，还将删除指定目录下的所有子目录和 文件。用于删除目录树。 /Q 安静模式，带 /S 删除目录树时不要求确认 示例: rd /s /q d:\abc 不用确认删除 abc 目录树, 即 abc以及abc中的内容,示例: rd /s d:\abc 需要用户确认方可删除 abc 目录树, 即 abc以及abc中的内容,示例: rd d:\abc 删除 abc 空目录, 即 abc中有内容不是空目录时无法删除, 重命名OSQL 一个SQL Ssever 的命令行工具注意: osql 并不支持 SQL Server 的所有功能。请使用 sqlcmd。有关详细信息，请参阅 SQL Server 联机丛书。用法: osql [-U 登录 ID] [-P 密码] [-S 服务器] [-H 主机名] [-E 可信连接] [-d 使用数据库名称] [-l 登录超时值] [-t 查询超时值] [-h 标题] [-s 列分隔符] [-w 列宽] [-a 数据包大小] [-e 回显输入] [-I 允许带引号的标识符] [-L 列出服务器] [-c 命令结束] [-D ODBC DSN 名称] [-q “命令行查询”] [-Q “命令行查询” 并退出] [-n 删除编号方式] [-m 错误级别] [-r 发送到 stderr 的消息] [-V 严重级别] [-i 输入文件] [-o 输出文件] [-p 打印统计信息] [-b 出错时中止批处理] [-X[1] 禁用命令，[退出的同时显示警告]] [-O 使用旧 ISQL 行为禁用下列项] 批处理 自动调整控制台宽度 宽消息 默认错误级别为 -1 和 1 [-? 显示语法摘要] 常用的主要是-E 可信连接-S 服务器ip-d 数据库名称-U 连接用户名-P 用户的密码-i 执行的sql文件-o sql语句输出的结果文件]]></content>
  </entry>
  <entry>
    <title><![CDATA[frist article]]></title>
    <url>%2F52109.html%2F</url>
    <content type="text"><![CDATA[My First ArticleI don’t know say what, it just for test article! means hello.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F16107.html%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
